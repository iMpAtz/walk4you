
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  email: 'email',
  phone: 'phone',
  role: 'role',
  registerDate: 'registerDate'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  storeName: 'storeName',
  storeDescription: 'storeDescription',
  registerDate: 'registerDate',
  status: 'status'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  productName: 'productName',
  description: 'description',
  price: 'price',
  stock: 'stock',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  status: 'status'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  orderDate: 'orderDate',
  totalPrice: 'totalPrice',
  status: 'status'
};

exports.Prisma.SubOrderScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  storeId: 'storeId',
  subTotal: 'subTotal',
  status: 'status'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  subOrderId: 'subOrderId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price'
};

exports.Prisma.ShipmentScalarFieldEnum = {
  id: 'id',
  subOrderId: 'subOrderId',
  shipmentDate: 'shipmentDate',
  trackingNumber: 'trackingNumber',
  status: 'status'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  paymentDate: 'paymentDate',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  reportType: 'reportType',
  description: 'description',
  submittedAt: 'submittedAt',
  status: 'status'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  actionType: 'actionType',
  targetUserId: 'targetUserId',
  targetStoreId: 'targetStoreId',
  timestamp: 'timestamp',
  description: 'description'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  SELLER: 'SELLER',
  ADMIN: 'ADMIN'
};

exports.CommonStatus = exports.$Enums.CommonStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BLOCKED: 'BLOCKED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  HIDDEN: 'HIDDEN',
  OUT_OF_STOCK: 'OUT_OF_STOCK'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ShipmentStatus = exports.$Enums.ShipmentStatus = {
  PREPARING: 'PREPARING',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  RETURNED: 'RETURNED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  COD: 'COD',
  CREDIT_CARD: 'CREDIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  E_WALLET: 'E_WALLET'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  OPEN: 'OPEN',
  REVIEWING: 'REVIEWING',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Store: 'Store',
  Category: 'Category',
  Product: 'Product',
  Order: 'Order',
  SubOrder: 'SubOrder',
  OrderItem: 'OrderItem',
  Shipment: 'Shipment',
  Payment: 'Payment',
  Report: 'Report',
  AdminAction: 'AdminAction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\Project\\Project\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\Project\\Project\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ============ Enums ============\nenum UserRole {\n  CUSTOMER\n  SELLER\n  ADMIN\n}\n\nenum CommonStatus {\n  ACTIVE\n  INACTIVE\n  BLOCKED\n}\n\nenum ProductStatus {\n  DRAFT\n  PUBLISHED\n  HIDDEN\n  OUT_OF_STOCK\n}\n\nenum OrderStatus {\n  PENDING\n  PAID\n  PROCESSING\n  SHIPPED\n  COMPLETED\n  CANCELLED\n}\n\nenum ShipmentStatus {\n  PREPARING\n  IN_TRANSIT\n  DELIVERED\n  RETURNED\n}\n\nenum PaymentMethod {\n  COD\n  CREDIT_CARD\n  BANK_TRANSFER\n  E_WALLET\n}\n\nenum PaymentStatus {\n  PENDING\n  PAID\n  FAILED\n  REFUNDED\n}\n\nenum ReportStatus {\n  OPEN\n  REVIEWING\n  RESOLVED\n  REJECTED\n}\n\n// ============ Models ============\nmodel User {\n  id           String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  username     String   @unique\n  password     String\n  email        String   @unique\n  phone        String?\n  role         UserRole @default(CUSTOMER)\n  registerDate DateTime @default(now())\n\n  // Relations\n  stores               Store[]\n  orders               Order[]       @relation(\"UserOrders\")\n  reports              Report[]\n  adminActions         AdminAction[] @relation(\"AdminPerformedActions\")\n  adminTargetedActions AdminAction[] @relation(\"AdminTargetUser\")\n}\n\nmodel Store {\n  id               String       @id @default(auto()) @map(\"_id\") @db.ObjectId\n  ownerId          String       @db.ObjectId\n  storeName        String\n  storeDescription String?\n  registerDate     DateTime     @default(now())\n  status           CommonStatus @default(ACTIVE)\n\n  // Relations\n  owner                User          @relation(fields: [ownerId], references: [id])\n  products             Product[]\n  subOrders            SubOrder[]\n  adminTargetedActions AdminAction[] @relation(\"AdminTargetStore\")\n\n  @@index([ownerId])\n}\n\nmodel Category {\n  id           String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  categoryName String @unique\n\n  products Product[]\n}\n\nmodel Product {\n  id          String        @id @default(auto()) @map(\"_id\") @db.ObjectId\n  storeId     String        @db.ObjectId\n  productName String\n  description String?\n  // ใช้ Int เก็บราคาเป็นจำนวนเซ็นต์ แทน Decimal (MongoDB connector ไม่รองรับ Decimal)\n  price       Int\n  stock       Int           @default(0)\n  categoryId  String?       @db.ObjectId\n  createdAt   DateTime      @default(now())\n  status      ProductStatus @default(PUBLISHED)\n\n  // Relations\n  store      Store       @relation(fields: [storeId], references: [id])\n  category   Category?   @relation(fields: [categoryId], references: [id])\n  orderItems OrderItem[]\n\n  @@index([storeId])\n  @@index([categoryId])\n}\n\nmodel Order {\n  id         String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  buyerId    String      @db.ObjectId\n  orderDate  DateTime    @default(now())\n  // เก็บยอดรวมหน่วยเป็นเซ็นต์\n  totalPrice Int\n  status     OrderStatus @default(PENDING)\n\n  // Relations\n  buyer     User       @relation(\"UserOrders\", fields: [buyerId], references: [id])\n  subOrders SubOrder[]\n  payment   Payment?\n\n  @@index([buyerId])\n}\n\nmodel SubOrder {\n  id       String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  orderId  String      @db.ObjectId\n  storeId  String      @db.ObjectId\n  // ยอดย่อยหน่วยเป็นเซ็นต์\n  subTotal Int\n  status   OrderStatus @default(PENDING)\n\n  // Relations\n  order    Order       @relation(fields: [orderId], references: [id])\n  store    Store       @relation(fields: [storeId], references: [id])\n  items    OrderItem[]\n  // ความสัมพันธ์ virtual ไปยัง Shipment (FK อยู่ที่ Shipment)\n  shipment Shipment?\n\n  @@index([orderId])\n  @@index([storeId])\n}\n\nmodel OrderItem {\n  id         String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  subOrderId String @db.ObjectId\n  productId  String @db.ObjectId\n  quantity   Int\n  // ราคา/ชิ้น หน่วยเป็นเซ็นต์\n  price      Int\n\n  // Relations\n  subOrder SubOrder @relation(fields: [subOrderId], references: [id])\n  product  Product  @relation(fields: [productId], references: [id])\n\n  @@index([subOrderId])\n  @@index([productId])\n}\n\nmodel Shipment {\n  id             String         @id @default(auto()) @map(\"_id\") @db.ObjectId\n  subOrderId     String         @unique @db.ObjectId\n  shipmentDate   DateTime?      @default(now())\n  trackingNumber String?\n  status         ShipmentStatus @default(PREPARING)\n\n  // Relations: one-to-one กับ SubOrder โดย FK อยู่ที่ Shipment\n  subOrder SubOrder @relation(fields: [subOrderId], references: [id])\n}\n\nmodel Payment {\n  id            String        @id @default(auto()) @map(\"_id\") @db.ObjectId\n  orderId       String        @db.ObjectId\n  paymentDate   DateTime      @default(now())\n  // จำนวนเงินหน่วยเป็นเซ็นต์\n  amount        Int\n  paymentMethod PaymentMethod @default(COD)\n  paymentStatus PaymentStatus @default(PENDING)\n\n  // Relations\n  order Order @relation(fields: [orderId], references: [id])\n\n  @@unique([orderId])\n}\n\nmodel Report {\n  id          String       @id @default(auto()) @map(\"_id\") @db.ObjectId\n  userId      String       @db.ObjectId\n  reportType  String\n  description String?\n  submittedAt DateTime     @default(now())\n  status      ReportStatus @default(OPEN)\n\n  // Relations\n  user User @relation(fields: [userId], references: [id])\n\n  @@index([userId])\n}\n\nmodel AdminAction {\n  id            String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  adminId       String   @db.ObjectId\n  actionType    String\n  targetUserId  String?  @db.ObjectId\n  targetStoreId String?  @db.ObjectId\n  timestamp     DateTime @default(now())\n  description   String?\n\n  // Relations\n  admin       User   @relation(\"AdminPerformedActions\", fields: [adminId], references: [id])\n  targetUser  User?  @relation(\"AdminTargetUser\", fields: [targetUserId], references: [id])\n  targetStore Store? @relation(\"AdminTargetStore\", fields: [targetStoreId], references: [id])\n\n  @@index([adminId])\n  @@index([targetUserId])\n  @@index([targetStoreId])\n}\n",
  "inlineSchemaHash": "6a11523c5aa4b817bc8fd4531a37803b4a4815903d747e0effefe166c087b134",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"registerDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"stores\",\"kind\":\"object\",\"type\":\"Store\",\"relationName\":\"StoreToUser\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"UserOrders\"},{\"name\":\"reports\",\"kind\":\"object\",\"type\":\"Report\",\"relationName\":\"ReportToUser\"},{\"name\":\"adminActions\",\"kind\":\"object\",\"type\":\"AdminAction\",\"relationName\":\"AdminPerformedActions\"},{\"name\":\"adminTargetedActions\",\"kind\":\"object\",\"type\":\"AdminAction\",\"relationName\":\"AdminTargetUser\"}],\"dbName\":null},\"Store\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"storeName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"storeDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"registerDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"CommonStatus\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StoreToUser\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToStore\"},{\"name\":\"subOrders\",\"kind\":\"object\",\"type\":\"SubOrder\",\"relationName\":\"StoreToSubOrder\"},{\"name\":\"adminTargetedActions\",\"kind\":\"object\",\"type\":\"AdminAction\",\"relationName\":\"AdminTargetStore\"}],\"dbName\":null},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"categoryName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"CategoryToProduct\"}],\"dbName\":null},\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"storeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"stock\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ProductStatus\"},{\"name\":\"store\",\"kind\":\"object\",\"type\":\"Store\",\"relationName\":\"ProductToStore\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToProduct\"},{\"name\":\"orderItems\",\"kind\":\"object\",\"type\":\"OrderItem\",\"relationName\":\"OrderItemToProduct\"}],\"dbName\":null},\"Order\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"buyerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalPrice\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"OrderStatus\"},{\"name\":\"buyer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserOrders\"},{\"name\":\"subOrders\",\"kind\":\"object\",\"type\":\"SubOrder\",\"relationName\":\"OrderToSubOrder\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"OrderToPayment\"}],\"dbName\":null},\"SubOrder\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"storeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subTotal\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"OrderStatus\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToSubOrder\"},{\"name\":\"store\",\"kind\":\"object\",\"type\":\"Store\",\"relationName\":\"StoreToSubOrder\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"OrderItem\",\"relationName\":\"OrderItemToSubOrder\"},{\"name\":\"shipment\",\"kind\":\"object\",\"type\":\"Shipment\",\"relationName\":\"ShipmentToSubOrder\"}],\"dbName\":null},\"OrderItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"subOrderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subOrder\",\"kind\":\"object\",\"type\":\"SubOrder\",\"relationName\":\"OrderItemToSubOrder\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"OrderItemToProduct\"}],\"dbName\":null},\"Shipment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"subOrderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shipmentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trackingNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ShipmentStatus\"},{\"name\":\"subOrder\",\"kind\":\"object\",\"type\":\"SubOrder\",\"relationName\":\"ShipmentToSubOrder\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"paymentMethod\",\"kind\":\"enum\",\"type\":\"PaymentMethod\"},{\"name\":\"paymentStatus\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToPayment\"}],\"dbName\":null},\"Report\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reportType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ReportStatus\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReportToUser\"}],\"dbName\":null},\"AdminAction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"adminId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetStoreId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminPerformedActions\"},{\"name\":\"targetUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminTargetUser\"},{\"name\":\"targetStore\",\"kind\":\"object\",\"type\":\"Store\",\"relationName\":\"AdminTargetStore\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

